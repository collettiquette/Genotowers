{
  "name": "string-alter",
  "version": "0.7.3",
  "description": "String alter",
  "main": "./build/es5/StringAlter.js",
  "bin": {
    "string-alter": "./build/es5/StringAlter.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/termi/StringAlter.git"
  },
  "keywords": [
    "string",
    "manipulation",
    "replace",
    "alter",
    "modify"
  ],
  "scripts": {},
  "dependencies": {},
  "devDependencies": {
    "es6-transpiler": "latest",
    "rangeindex": "latest"
  },
  "author": {
    "name": "Termi",
    "email": "1+guthub@h123.ru"
  },
  "license": "MIT",
  "readme": "# StringAlter.js\r\nAlters a string by replacing multiple range fragments in one fast pass.\r\nWorks in node and browsers.\r\n\r\n\r\n\r\n## Usage\r\n```javascript\r\n    var StringAlter = require(\"string-alter\");\r\n\r\n    var string =\r\n        'let x = (a, b, c = 998) =>'\r\n        + 'a + b + c;console.log(x(1, 1) === 1000)'\r\n        + '\\n'\r\n        + 'console.log(((function(){return (a)=>a*22.032})())(\"321\") === \"321\"*22.032)'\r\n    ;\r\n\r\n    var alter = new StringAlter(string);\r\n    alter\r\n        .replace(0, 3, \"var\")//'let'\r\n        .insert(8, \"function\")//'function ' + \"(a, b\"\r\n        .remove(13, 22)//', c = 998'\r\n        .remove(23, 26)//' =>'\r\n        .wrap(26, 35, \"{\", \"}\", {extend: true})\r\n        .insert(26,\r\n            \"var \" + alter.get(15, 16) + \" = arguments[2];\"\t\t //var c = arguments[2];\r\n            + \"if(\" + alter.get(15, 16) + \" === void 0)\"\t\t //if(c === void 0)\r\n            + alter.get(15, 16) + \" = \" + alter.get(19, 22) + \";\"//c = 998;\r\n        )\r\n        .insert(26, \"return \")//'return ' + \"a + b + c;\"\r\n        .insert(98, \"function\")//'function ' + \"(a)\"\r\n        .remove(101, 103)//'=>'\r\n        .wrap(103, 111, \"{\", \"}\", {extend: true})\r\n        .insert(103, \"return \")//'return ' + \"a*22.032\"\r\n    ;\r\n    var result = alter.apply();\r\n    result ===\r\n        'var x = function(a, b)'\r\n        + '{var c = arguments[2];if(c === void 0)c = 998;return a + b + c};console.log(x(1, 1) === 1000)'\r\n        + '\\n'\r\n        + 'console.log(((function(){return function(a){return a*22.032}})())(\"321\") === \"321\"*22.032)'\r\n    ;\r\n\r\n```\r\n\r\nThe fragments does not need to be sorted but must not overlap. More examples in `test`\r\n\r\n## API\r\n```javascript\r\nvar alter = new StringAlter(source: string, options: Object?);\r\n// options is optional. See 'StringAlter options'\r\n```\r\n\r\n```javascript\r\nalter.replace(from: number, to: number, str: string): StringAlter\r\n```\r\nReplace substring from between \"from\" and \"to\" positions to given one \"str\"\r\n\r\n```javascript\r\nalter.insert(pos: number, str: string): StringAlter\r\n```\r\nInsert substring to \"pos\" position\r\n\r\n```javascript\r\nalter.wrap(from: number, to: number, begin: string, end: string): StringAlter\r\n```\r\nInsert \"begin\" string to \"from\" position and \"end\" string to \"to\" position\r\n\r\n```javascript\r\nalter.remove(from: number, to: number): StringAlter\r\n```\r\nRemove substring\r\n\r\n```javascript\r\nalter.get(from: number, to: number): Object\r\n```\r\nGet substring from original string wrapped in special object with toString function\r\n\r\n```javascript\r\nalter.apply(): string\r\n```\r\nApply changes. Return result string\r\n\r\n## StringAlter options\r\n```javascript\r\n{\r\n\tpolicy: {}// see 'Changes policy'\r\n}\r\n```\r\n\r\n### Changes policy\r\n```javascript\r\n{\r\n\t\"ruleName\": resolve//resolve should be \"allow\" or \"exclude\", or any other value which will be interpreted as \"error\"\r\n}\r\n```\r\nThis is a set of rules that can `allow` or `exclude` some unobvious changes\r\n\r\n * `fromMoreThanTo` (default: 'error') - when changes start position is is larger than end position\r\n * `unUniqueRemove` (default: 'error') - second `remove` call for already removed fragment (with the same method parameter values)\r\n * `eraseInErase` (default: 'allow') - `remove` or `replace` inside another `remove` or `replace`\r\n\r\n\r\n## Installation\r\n\r\n### Node\r\nInstall using npm\r\n\r\n    npm install string-alter\r\n\r\n```javascript\r\nvar StringAlter = require(\"string-alter\");\r\n```\r\n\r\n### Browser\r\n\r\nClone the repo and include it in a script tag\r\n\r\n    git clone https://github.com/termi/StringAlter.git\r\n\r\n```html\r\n<script src=\"StringAlter/dist/StringAlter.js\"></script>\r\n```\r\n\r\n## LICENSE\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/termi/StringAlter/issues"
  },
  "_id": "string-alter@0.7.3",
  "dist": {
    "shasum": "54532062724abeed24b9bd06a238c901e5b97fff"
  },
  "_from": "string-alter@latest",
  "_resolved": "https://registry.npmjs.org/string-alter/-/string-alter-0.7.3.tgz"
}
